from asgiref.sync import sync_to_async
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    Update,
)
from telegram.ext import ContextTypes, ConversationHandler

from object.models import (
    BuldingType,
    Category,
    City,
    Condition,
    Realty,
)
from tg_bot.models import PriceIntervals, AreaIntervals
from tg_bot.handlers.show_realty import show_realty
from tg_bot.middleware import is_user_blocked
from tg_bot.handlers.base_utils import get_country_from_city
from .constants import (
    CHOOSE,
    CITY_TYPING,
    FIELDS,
    LOGO_URL_ABSOLUTE,
    LOGO_URL_RELATIVE,
    MAIN_FIELDS,
    OTHER_FIELDS,
    REPRESENT,
    REPRESENT_CITYS,
    SAVE_CHOOSE,
    TYPING,
)
from .keyboards import (
    publish_date_keyboard,
    all_obj_keyboard,
    interval_keyboard,
    location__city_keyboard,
    main_keyboard,
    other_keyboard,
    send_citys_keyboard,
    send_page_keyboard,
)
from .keyboards import RETURN_TO_MAIN_BUTTON
from .texts import user_data_as_text
from .utils import (
    edit_or_send,
    filter_args,
    insert_object_card,
    save_is_subscribed,
    save_search_parameters,
    unpack_search_parameters,
)


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    if await is_user_blocked(user_id):
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>",
            parse_mode="HTML",
        )
        return ConversationHandler.END
    if "search" not in context.user_data:
        if not await unpack_search_parameters(update, context):
            return await cancel(update, context)
    if "location__city" not in context.user_data:
        return await location__city(update, context)
    if "all_citys" in context.user_data:
        del context.user_data["all_citys"]
    if "suitable_realtys" in context.user_data:
        del context.user_data["suitable_realtys"]
    context.user_data["search"] = True
    reply_markup = InlineKeyboardMarkup(await main_keyboard(context, update))
    main_text = await user_data_as_text(context)
    await edit_or_send(update, context, main_text, reply_markup)
    return CHOOSE


async def location__city(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    reply_markup = InlineKeyboardMarkup(await location__city_keyboard())
    context.user_data["choose"] = "location__city"
    if "location__city" in context.user_data:
        city = await sync_to_async(
            lambda: City.objects.filter(id=context.user_data["location__city"])
            .values_list("name")
            .first()[0]
        )()
        city_text = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –≥–æ—Ä–æ–¥: {city}"
    else:
        city_text = "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥!"
    await edit_or_send(update, context, city_text, reply_markup)
    return SAVE_CHOOSE


async def city_typing(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str = None
) -> int:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤."""
    if not text:
        text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
        reply_markup = None
    else:
        reply_markup = InlineKeyboardMarkup(await send_citys_keyboard())
    await edit_or_send(update, context, text, reply_markup)
    return CITY_TYPING


MAX_CITYS = 60


async def other_citys_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    page = 0
    citys = []
    async for city in City.objects.filter(name__icontains=text):
        country = await get_country_from_city(city)
        citys.append(
            {"name": city.name,
             "region": city.district,
             "country": country,
             "pk": city.pk}
        )
    if len(citys) > MAX_CITYS:
        citys = []
    context.user_data["all_citys"] = citys
    return await send_citys(update, context, page)


async def send_citys(update: Update, context: ContextTypes.DEFAULT_TYPE, page):
    citys = context.user_data["all_citys"]
    if citys:
        message_text = "–≤–æ—Ç:"
    else:
        text = "–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ!"
        return await city_typing(update, context, text)
    reply_markup = InlineKeyboardMarkup(await send_citys_keyboard(citys, page))
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=LOGO_URL_RELATIVE,
        caption=message_text,
        reply_markup=reply_markup,
    )
    return REPRESENT_CITYS


async def rep_button2(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    query = update.callback_query
    await query.answer()
    query_data = query.data

    if query_data.startswith("page_"):
        page = int(query_data.split("_")[1])
        await send_citys(update, context, page)
    if query_data.startswith("main_menu"):
        await main_menu(update, context)


async def rent_or_sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ê—Ä–µ–Ω–¥–∞", callback_data="rent")],
            [InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞", callback_data="sell")],
            [RETURN_TO_MAIN_BUTTON],
        ]
    )
    context.user_data["choose"] = "rent_or_sell"
    text = "–ê—Ä–µ–Ω–¥–∞/–ü—Ä–æ–¥–∞–∂–∞"
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def area(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–ª–æ—â–∞–¥–∏"""
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(await interval_keyboard(AreaIntervals))
    context.user_data["choose"] = "area"
    text = "–í—ã–±–µ—Ä–∏ –ø–ª–æ—â–∞–¥—å"
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω—ã."""
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(
        await interval_keyboard(PriceIntervals)
    )
    context.user_data["choose"] = "price"
    text = "–í—ã–±–µ—Ä–∏ —Ü–µ–Ω—É"
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(await all_obj_keyboard(Category))
    context.user_data["choose"] = "category"
    if "category" in context.user_data:
        text = f'–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–∞–Ω–µ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:{context.user_data["category"]}'
    else:
        text = "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!"
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def refresh_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ –≥–æ—Ä–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    for field in MAIN_FIELDS | OTHER_FIELDS:
        if field in context.user_data and field != "location__city":
            del context.user_data[field]
    return await main_menu(update, context)


async def represent_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    realtys = []
    async for realty in Realty.objects.filter(**filter_args(context.user_data)):
        realtys.append(
            {
                "title": realty.title,
                "id": realty.id,
                "area": realty.area,
                "price": realty.price,
                "image": realty.image,
                "is_active": realty.is_active,
            }
        )
    context.user_data["suitable_realtys"] = realtys

    if not realtys:
        text = "ü§∑‚Äç‚ôÇÔ∏è –ù–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ."
        keyboard = [[RETURN_TO_MAIN_BUTTON]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
        return

    page = context.user_data.get("page", 0)

    if 0 <= page < len(realtys):
        realty = realtys[page]
        realty_id = realty["id"]

        if not realty["is_active"]:
            text = (
                f"–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {realty['title']}\n"
                "–≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        else:
            text = (
                f"–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {realty['title']}\n"
                f"–ü–ª–æ—â–∞–¥—å: {realty['area']} –∫–≤.–º\n"
                f"–¶–µ–Ω–∞: {realty['price']} —Ä—É–±."
            )

        keyboard = send_page_keyboard(page, len(realtys), realty_id)
        reply_markup = InlineKeyboardMarkup(keyboard)
        if realty["image"]:
            await insert_object_card(query, realty["image"], text, reply_markup)
        else:
            await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    else:
        text = "ü§∑‚Äç‚ôÇÔ∏è –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
        keyboard = [
            [RETURN_TO_MAIN_BUTTON]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return CHOOSE



async def realty_callback_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await show_realty(update, context)


async def page_navigation_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    page = int(query.data.split("_")[1])
    context.user_data["page"] = page
    await represent_results(update, context)


async def back_to_list_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await represent_results(update, context)


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_media(
        media=InputMediaPhoto(
            media=LOGO_URL_ABSOLUTE, caption="–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω."
        ),
    )


async def send_page(update: Update, context: ContextTypes.DEFAULT_TYPE, page):
    realtys = context.user_data["suitable_realtys"]
    realty = realtys[page]
    text = (f'–≤–æ—Ç:\n{realty["title"]}\n{FIELDS["area"]}: '
            f'{realty["area"]}\n{FIELDS["price"]}: {realty["price"]}\n')
    pk = realty["id"]
    reply_markup = InlineKeyboardMarkup(
        send_page_keyboard(page, len(realtys), pk)
    )
    query = update.callback_query
    await query.answer()
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return REPRESENT


async def rep_button(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    query = update.callback_query
    await query.answer()
    query_data = query.data

    page = int(query_data.split("_")[1])
    await send_page(update, context, page)


async def other_menu(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
    reply_markup = InlineKeyboardMarkup(other_keyboard(context))
    text = await user_data_as_text(context)
    if not context.user_data.get("text_input"):
        await edit_or_send(update, context, text, reply_markup)
    else:
        await update.message.reply_photo(
            caption=text,
            photo=LOGO_URL_ABSOLUTE,
            reply_markup=reply_markup
        )
        del context.user_data["text_input"]
    return CHOOSE


async def publish_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    reply_markup = InlineKeyboardMarkup(await publish_date_keyboard())
    context.user_data["choose"] = "publish_date"
    query = update.callback_query
    text = "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    await query.answer()
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def condition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(await all_obj_keyboard(Condition))
    context.user_data["choose"] = "condition"
    if "condition" in context.user_data:
        text = ('–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π'
                f':{context.user_data["condition"]}')
    else:
        text = "–ö–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π –≤–∞—Å —É—Å—Ç—Ä–æ–∏—Ç?"
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def building_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(await all_obj_keyboard(BuldingType))
    context.user_data["choose"] = "building_type"
    if "building_type" in context.user_data:
        text = (
            f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Ç–∏–ø –∑–¥–∞–Ω–∏—è:{context.user_data["building_type"]}'
        )
    else:
        text = "–í–∞–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–¥–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–º –Ω—É–∂–Ω—ã –ø–æ–º–µ—â–µ–Ω–∏—è."
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω–æ", callback_data="relevant")],
            [InlineKeyboardButton(
                "–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ", callback_data="not_relevant")],
            [RETURN_TO_MAIN_BUTTON],
        ]
    )
    context.user_data["choose"] = "status"
    text = "–ê–∫—Ç—É–∞–ª—å–Ω–æ/–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ"
    await insert_object_card(query, LOGO_URL_ABSOLUTE, text, reply_markup)
    return SAVE_CHOOSE


async def text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Prompt user to input data for selected feature."""
    context.user_data["choose"] = update.callback_query.data
    text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å, –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"
    query = update.callback_query
    await query.answer()
    await query.edit_message_media(
        media=InputMediaPhoto(media=LOGO_URL_ABSOLUTE, caption=text),
    )
    return TYPING


async def save_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Save text for feature and return to other menu."""
    user_data = context.user_data
    user_data[user_data["choose"]] = update.message.text
    context.user_data["text_input"] = True
    return await other_menu(update, context)


async def save_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    query = update.callback_query
    await query.answer()
    user_data[user_data["choose"]] = query.data
    if user_data["choose"] in MAIN_FIELDS:
        return await main_menu(update, context)
    return await other_menu(update, context)


async def refresh_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–æ–¥–∏–º—ã–µ –≤–æ –≤—Å–ø–º–æ–≥–∞—Ç–ª—å–Ω–æ–º –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    for field in OTHER_FIELDS:
        if field in context.user_data:
            del context.user_data[field]
    return await other_menu(update, context)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞"""
    if "search" in context.user_data:
        del context.user_data["search"]
    if await save_search_parameters(update, context):
        text = "–ü–æ–∏—Å–∫ –æ–∫–æ–Ω—á–µ–Ω."
    else:
        text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start"
    await edit_or_send(update, context, text)
    return ConversationHandler.END


async def subscribe(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    query = update.callback_query
    await query.answer()
    is_subscribed = False
    if query.data.split("_")[-1] == "no":
        is_subscribed = True
    if not is_subscribed:
        await save_search_parameters(update, context)
    tg_id = update.effective_chat.id
    await save_is_subscribed(tg_id, is_subscribed)
    await main_menu(update, context)
