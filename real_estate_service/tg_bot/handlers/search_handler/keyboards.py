from telegram import InlineKeyboardButton
from telegram.ext import ContextTypes
from django.db import models

from object.models import (
    City,
)
from .constants import MAIN_FIELDS, OTHER_FIELDS
from .utils import dict_to_string


def main_keyboard(
        context:  ContextTypes.DEFAULT_TYPE
) -> list[list[InlineKeyboardButton]]:
    keyboard = []
    for field in MAIN_FIELDS:
        keyboard.append(
            [InlineKeyboardButton(MAIN_FIELDS[field], callback_data=field)]
        )
    is_search_data = False
    for field in MAIN_FIELDS | OTHER_FIELDS:
        if field in context.user_data and field != 'location__city':
            is_search_data = True
            break
    if is_search_data:
        keyboard.append(
            [
                InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã',
                                     callback_data='refresh_all'),
                InlineKeyboardButton('–ü—Ä–æ—á–µ–µ', callback_data='other'),
            ]
        )
        keyboard.append(
            [InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                                  callback_data='represent_results')]
        )
    else:
        keyboard.append(
            [
                InlineKeyboardButton('–ü—Ä–æ—á–µ–µ', callback_data='other'),
                InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                                     callback_data='represent_results')
            ]
        )
    return keyboard


def other_keyboard(
        context:  ContextTypes.DEFAULT_TYPE
) -> list[list[InlineKeyboardButton]]:
    keyboard = []
    for field in OTHER_FIELDS:
        keyboard.append(
            [InlineKeyboardButton(OTHER_FIELDS[field], callback_data=field)]
        )
    is_search_data = False
    for field in OTHER_FIELDS:
        if field in context.user_data:
            is_search_data = True
            break
    if is_search_data:
        keyboard.append(
            [
                InlineKeyboardButton(
                    '–°–±—Ä–æ—Å–∏—Ç—å', callback_data='refresh_other'),
                InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
                                     callback_data='return_to_main'),
            ]
        )
    else:
        keyboard.append(
            [
                InlineKeyboardButton('üü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
                                     callback_data='return_to_main'),
            ]
        )

    return keyboard


async def all_obj_keyboard(
        model: models.Model
) -> list[list[InlineKeyboardButton]]:
    keyboard = []
    async for object in model.objects.all().values_list('name', 'pk'):
        data = {
            'name': object[0],
            'pk': object[1]
        }
        keyboard.append(
            [
                InlineKeyboardButton(data['name'], callback_data=data['pk'])
            ]
        )
    keyboard.append(
        [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é', callback_data='menu')]
    )
    return keyboard


async def location__city_keyboard() -> list[list[InlineKeyboardButton]]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    keyboard = []
    async for city in City.objects.filter(
        is_in_main_menu=True
    ).values_list('name', 'pk'):
        city_dic = {'name': city[0], 'pk': city[1]}
        keyboard.append(
            [
                InlineKeyboardButton(
                    city_dic['name'],
                    callback_data=city_dic['pk']
                )
            ]
        )
    keyboard.append([InlineKeyboardButton(
        '–ì–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.',
        callback_data='city_typing'
    )])
    return keyboard


AREA_KEYBOARD = [
    [InlineKeyboardButton('1-150', callback_data='1-150')],
    [InlineKeyboardButton(
        '150-1000', callback_data='150-1000')],
    [InlineKeyboardButton('1000-100000', callback_data='1000-100000')]
]

PRICE_KEYBOARD = [
    [InlineKeyboardButton('1-150', callback_data='1-150')],
    [InlineKeyboardButton(
        '150-1000', callback_data='150-1000')],
    [InlineKeyboardButton('1000-100000', callback_data='1000-100000')]
]


REPRESENT_RESULTS_KEYBOARD = [
    [InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ–ª', callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ–ª')],
]

PUBLISH_DATE_KEYBOARD = [
    [InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ', callback_data='1')],
    [InlineKeyboardButton(
        '–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data='7')],
    [InlineKeyboardButton(
        '–ó–∞ –º–µ—Å—è—Ü', callback_data='31')],
    [InlineKeyboardButton('–ü–æ–ª–≥–æ–¥–∞', callback_data='184')]
]


async def send_citys_keyboard(
        citys: list[dict],
        page: int
) -> list[list[InlineKeyboardButton]]:
    start_index = page * 6
    end_index = start_index + 6
    items = citys[start_index:end_index]
    if not citys:
        keyboard = [
            [InlineKeyboardButton('–≤—ã–π—Ç–∏', callback_data='main_menu')],
            [InlineKeyboardButton(
                '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ', callback_data='city_typing')]
        ]
        return keyboard
    keyboard = []
    for city in items:
        keyboard.append(
            [InlineKeyboardButton(
                city['name'] + ':' + city['region'],
                callback_data=city['pk'])
             ]
        )
    keyboard.append([])
    if page > 0:
        keyboard[-1].append(InlineKeyboardButton(
            '–ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data=f'page_{page-1}'))
    if end_index < len(citys):
        keyboard[-1].append(InlineKeyboardButton(
            '–°–ª–µ–¥—É—é—â–∞—è', callback_data=f'page_{page+1}'))
    keyboard.append(
        [InlineKeyboardButton('–≤—ã–π—Ç–∏', callback_data='main_menu')]
    )
    return keyboard


def send_page_keyboard(page, length):
    keyboard = []
    if page > 0:
        keyboard.append(InlineKeyboardButton(
            "–ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{page-1}"))
    if page + 1 < length:
        keyboard.append(InlineKeyboardButton(
            "–°–ª–µ–¥—É—é—â–∞—è", callback_data=f"page_{page+1}"))
    keyboard.append(
        InlineKeyboardButton('–≤—ã–π—Ç–∏', callback_data='main_menu')
    )
    return [keyboard]
